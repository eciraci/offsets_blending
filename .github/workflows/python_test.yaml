name: preliminary-ci-test-with-pip

on:
  push:
    branches: [ dev ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies for Linux
        if: matrix.os == 'ubuntu-20.04'
        env:
          JOBS: 2
          PROJ_VERSION: 8.0.1
          PROJ_DATUMGRID_VERSION: 1.8
          PROJ_NETWORK: ON
          SQLITE3_CFLAGS: "-I/usr/local/include"
          SQLITE3_LIBS: "-L/usr/local/lib -lsqlite3"
        run: |
          sudo apt-get update
          sudo apt-get install gdal-bin libgdal-dev libgeos-dev
          sudo apt-get install libhdf5-dev libnetcdf-dev octave
          sudo apt-get install libstdc++6 libxml2-dev libxslt1-dev libsqlite3-dev
          cd ${RUNNER_TEMP}
          wget -q https://download.osgeo.org/proj/proj-${PROJ_VERSION}.tar.gz
          wget -q http://download.osgeo.org/proj/proj-datumgrid-${PROJ_DATUMGRID_VERSION}.zip
          tar -xzf proj-${PROJ_VERSION}.tar.gz
          unzip proj-datumgrid-${PROJ_DATUMGRID_VERSION}.zip -d proj-${PROJ_VERSION}/data/
          cd proj-${PROJ_VERSION}
          mkdir build
          cd build
          sudo cmake \
              -DPYTHON_EXECUTABLE=/usr/local/bin/python3 \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=true \
              -DCMAKE_INSTALL_PREFIX=/usr/local/ ..
          sudo cmake --build .
          sudo make --quiet --jobs=${JOBS}
          sudo make --quiet install
          make clean
          cd ${GITHUB_WORKSPACE}
          sudo ldconfig --verbose
          sudo projsync --system-directory --all
          pip install --upgrade pip
          pip install numpy
          pip install zarr
          pip install pandas
          pip install flake8
          export CPLUS_INCLUDE_PATH=/usr/include/gdal
          export C_INCLUDE_PATH=/usr/include/gdal
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Install dependencies for MacOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install proj
          brew install geos
          brew install gdal
          brew install hdf5
          brew install netcdf
          brew install octave
          brew install pkg-config
          pip install --upgrade pip
          pip install cython
          pip install numpy
          pip install zarr
          pip install pandas
          pip install flake8
          pip install scikit-learn
          export LDFLAGS="-L/usr/local/opt/proj/lib"
          export CPPFLAGS="-I/usr/local/opt/proj/include"
          export ACCEPT_USE_OF_DEPRECATED_PROJ_API_H=1
          export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/opt/proj/lib/pkgconfig"
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies for the considered OS
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8
      - name: Display Python version
        run: python --version

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics